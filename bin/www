#!/usr/bin/env node

/**
 * Module dependencies.
 */

require("dotenv").config({ path: "../.env" });
const { ApolloServer, ForbiddenError } = require("apollo-server");
const { ApolloServerPluginDrainHttpServer } = require("apollo-server-core");
const { mergeResolvers } = require("@graphql-tools/merge");
const { mergeTypeDefs } = require("@graphql-tools/merge");
const jwt = require("jsonwebtoken");
const expressJwt = require("express-jwt");
var app = require("../app");
var http = require("http");
const { userDefs, userResolvers } = require("../gql/User");
const { notesDef, notesResolvers } = require("../gql/Notes");
const { classDef, classResolvers } = require("../gql/Class");
const { gradeCalcDef, gradeCalcResolvers } = require("../gql/GradeCalc");
const { userNotesDef, userNotesResolvers } = require("../gql/UserNotes");
const { toDoDef, toDoResolvers } = require("../gql/ToDo");
const models = require("../models");
const resolvers = mergeResolvers([
  userResolvers,
  notesResolvers,
  classResolvers,
  gradeCalcResolvers,
  userNotesResolvers,
  toDoResolvers,
]);
const typeDefs = mergeTypeDefs([
  userDefs,
  notesDef,
  classDef,
  gradeCalcDef,
  userNotesDef,
  toDoDef,
]);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || 5000);
app.set("port", port);

// add the jwt middleware to the app
app.use(
  expressJwt({
    secret: process.env.JWT_SECRET,
    algorithms: ["HS256"],
    credentialsRequired: false,
  })
);

/**
 * Create HTTP server.
 */

var httpServer = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

// hs256 algorithm
const getUser = (token) => {
  if (token) {
    try {
      // return the user information from the token
      return jwt.verify(token, process.env.JWT_SECRET);
    } catch (err) {
      // if there's a problem with the token, throw an error
      throw new ForbiddenError("Session invalid");
    }
  }
};

const server = new ApolloServer({
  typeDefs: typeDefs,
  resolvers: resolvers,
  playground: true,
  context: ({ req }) => {
    // sending authentication token to this body
    // get the user token from the headers
    const token = req.headers.authorization;
    // try to retrieve a user with the token
    const user = getUser(token);
    // for now, let's log the user to the console:
    // console.log(user);
    // add the db models and the user to the context
    return { models, user };
  },

  plugins: [ApolloServerPluginDrainHttpServer({ httpServer })],
});

server.listen(port, () => console.log(`listening to ${port}`));
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
